from datetime import (
    datetime,
    timedelta,
    date
)
import json
import requests
import simplejson
from jinja2 import Template
import pprint

class CVE:
    def __init__(self, logger, config:dict, args, database, email, telegram):
        self.logger = logger.logging()
        self.config = config
        self.args = args
        self.database = database
        self.email = email
        self.telegram = telegram
        self.appconfig = self.config.cve
        self.logger.info(f"Starting CVE search process")


    @property
    def start(self):
        for url in self.appconfig['urls']:
            if 'pubStartDate' in url:
                urldate = f"{url}{date.today()}T00:00:00:000 UTC-03:00"
                self.logger.info(
                    f"Downloading the items in the url {urldate}")

                try:
                    self.cveinfo(requests.get(urldate).json(), urldate)
                except (json.decoder.JSONDecodeError, simplejson.errors.JSONDecodeError) as e:
                    self.logger.error(
                        "It was not possible to download the CVEs, in the next loop it will be done again.")

                yesterday = datetime.strftime(
                    datetime.now() - timedelta(self.appconfig['lastdays']), '%Y-%m-%d')
                urldate = f"{url}{yesterday}T00:00:00:000 UTC-03:00"
                self.logger.info(
                    f"Downloading the items in the url {urldate}")
                try:
                    self.cveinfo(requests.get(urldate).json(), urldate)
                except (json.decoder.JSONDecodeError, simplejson.errors.JSONDecodeError) as e:
                    self.logger.error(
                        "It was not possible to download the CVEs, in the next loop it will be done again.")
            elif 'modStartDate' in url:
                urldate = f"{url}{date.today()}T00:00:00:000 UTC-03:00"
                self.logger.info(
                    f"Downloading the items in the url {urldate}")

                try:
                    self.cveinfo(requests.get(urldate).json(), urldate)
                except (json.decoder.JSONDecodeError, simplejson.errors.JSONDecodeError) as e:
                    self.logger.error(
                        "It was not possible to download the CVEs, in the next loop it will be done again.")

                yesterday = datetime.strftime(
                    datetime.now() - timedelta(self.appconfig['lastdays']), '%Y-%m-%d')
                urldate = f"{url}{yesterday}T00:00:00:000 UTC-03:00"
                self.logger.info(
                    f"Downloading the items in the url {urldate}")
                try:
                    self.cveinfo(requests.get(urldate).json(), urldate)
                except (json.decoder.JSONDecodeError, simplejson.errors.JSONDecodeError) as e:
                    self.logger.error(
                        "It was not possible to download the CVEs, in the next loop it will be done again.")

            elif 'startIndex' in url:
                self.logger.info(
                    f"Downloading the items in the url {urldate}")
                try:
                    self.cveinfo(requests.get(url).json(), url)
                except (json.decoder.JSONDecodeError, simplejson.errors.JSONDecodeError) as e:
                    self.logger.error(
                        "It was not possible to download the CVEs, in the next loop it will be done again.")

    def product(self, vendor):
        for product in self.appconfig['products']:
            if product.lower() in vendor:
                return True
            
    def markdown_output(self, markdownfile:str, infos:dict):
        
        
        
        with open(markdownfile, 'r') as file:
            tm = Template(file.read())

        telegram_template = tm.render(**infos)
        

        return telegram_template

    def cveinfo(self, data, url):
        for info in data['result']['CVE_Items']:
            if date.today().month <= 9:
                date_cve = f'0{date.today().month}'
            elif date.today().month >= 10 \
                    and date.today().month <= 12:
                date_cve = str(date.today().month)
            if info['publishedDate'].split('-')[1] == date_cve \
                 or info['lastModifiedDate'].split('-')[1] == date_cve:
                if info.get('impact') is not None:
                    for impact in info['impact']:
                        if impact.startswith('baseMetricV3'):
                            score = float(
                                info['impact'][impact]['cvssV3']['baseScore'])
                            if score >= 0:
                                description = info['cve']['description']['description_data'][0]['value'] \
                                    .replace("'", "") \
                                    .replace('"', '')
                                if "** REJECT **" not in description \
                                        and "** DISPUTED **" not in description:

                                    name = info['cve']['CVE_data_meta']['ID']
                                    references_cves = []
                                    for reference_data in info['cve']['references']['reference_data']:
                                        myreferences = reference_data['url'] \
                                            .replace("'", "") \
                                            .replace('"', '')
                                        references_cves.append(myreferences)

                                    try:
                                        vendor = info['configurations']['nodes'][0]['children'][0]['cpe_match'][0]['cpe23Uri'].split(':')[
                                            3]
                                    except (KeyError) as e:
                                        try:
                                            vendor = info['configurations']['nodes'][0]['cpe_match'][0]['cpe23Uri'].split(':')[
                                                3]
                                        except:
                                            vendor = None
                                            self.logger.error(
                                                f"CVE {info['cve']['CVE_data_meta']['ID']} rejected or is still in dispute.")
                                    if vendor is not None:
                                        vendor_match = self.product(vendor)

                                        vendor_match = True if vendor_match is not None else False

                                        infos = {
                                            "@timestamp": datetime.strptime(f"{info['lastModifiedDate']}", '%Y-%m-%dT%H:%MZ'),
                                            "landscape": self.appconfig['landscape'],
                                            "mitre": self.appconfig['mitre'],
                                            "type": self.appconfig['type'],
                                            "app": self.appconfig['app'],
                                            "source": self.appconfig['app'],
                                            "name": name,
                                            "score": score,
                                            "description": description,
                                            "references": references_cves,
                                            "publishedDate": info['publishedDate'].split('T')[0],
                                            "lastModifiedDate": info['lastModifiedDate'].split('T')[0],
                                            "baseSeverity": info['impact'][impact]['cvssV3']['baseSeverity'],
                                            "attackVector": info['impact'][impact]['cvssV3']['attackVector'],
                                            "attackComplexity": info['impact'][impact]['cvssV3']['attackComplexity'],
                                            "scope": info['impact'][impact]['cvssV3']['scope'],
                                            "userInteraction": info['impact'][impact]['cvssV3']['userInteraction'],
                                            "vendor": vendor,
                                            "vendor_match": vendor_match,
                                        }
                                        
                                        
                                        if self.database.compare(infos['name']) \
                                            and infos['score'] >= self.appconfig['score']:
                                            
                                            if self.appconfig.get('email', None) is not None \
                                                and self.appconfig['email']['active'] \
                                                and vendor_match:
                                                self.email.sendmail(
                                                    self.appconfig['email']['template'],
                                                    infos['name'],
                                                    self.config.general['emails']['sender'],
                                                    self.appconfig['email']['to'],
                                                    infos={
                                                        "data": infos['@timestamp'],
                                                        "cve": infos['name'],
                                                        "score": infos['score'],
                                                        "url": f"https://nvd.nist.gov/vuln/detail/{infos['name']}",
                                                        "description": infos['description']
                                                    }
                                                )
                                                
                                                
                                                
                                            elif self.appconfig['telegram']['active'] \
                                                and infos['score'] >= self.appconfig['score'] \
                                                and vendor_match:
                                                self.logger.info(f"Sending {infos ['name']} to the telegram.")
                                                sendmsg = self.telegram.send(
                                                    self.markdown_output(
                                                        self.appconfig['telegram']['template'],
                                                        infos
                                                    )
                                                )
                                                
                                                if sendmsg:
                                                    self.logger.info(f"Alert sent successfully.")
                                                else:
                                                    self.logger.error("Could not send alert")
                    
                                            self.database.save({
                                                "rawid": infos['name'],
                                                "date": datetime.now()
                                            })
                                        else:
                                            self.logger.debug(f"{name} already exists in the database")
                                else:
                                    self.logger.error(
                                        f"CVE {info['cve']['CVE_data_meta']['ID']} rejected or is still in dispute.")
